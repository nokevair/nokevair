{%- extends "base.html" -%}

{%- block title -%}
    Simulation Files
{%- endblock title -%}

{%- block css %}
    <link type="text/css" rel="stylesheet" href="/admin/static/sim_files.css" />
    <link type="text/css" rel="stylesheet" href="/admin/static/hljs.css" />
{%- endblock css -%}

{%- block content %}
    <h1>Simulation Files</h1>
    <div id="file-browser">
        <div id="file-list-pane">
            <div id="file-list-header">Files</div>
            <div id="file-list-container">
                <ul id="file-list">
                {%- for file in files %}
                    <li onclick="select({{ loop.index0 }})"><span class="file-select-msg">{% if file == active %}(*){% endif %}</span><span class="file-name">{{ file }}</span></li>
                {%- endfor %}
                </ul>
            </div>
            <div id="file-list-footer"><span class="link-button" onclick="updateSimFile()">(select)</span></div>
        </div>
        <div id="code-pane"><div class="code-status">No file selected.</div></div>
    </div>
{%- endblock content -%}

{%- block js %}
    <script src="/admin/static/hljs.js"></script>
    <script>
        // Maps filenames to <code> elements which may or may not be on the DOM.
        let loadedFiles = new Map();

        async function loadFile(name) {
            if (loadedFiles.has(name)) {
                return loadedFiles.get(name);
            }
            let response = await fetch("/admin/sim_files/" + name);
            if (response.ok) {
                let text = await response.text();
                let codeElem = document.createElement("code");
                codeElem.innerHTML = text;
                codeElem.classList.add("lua");
                hljs.highlightBlock(codeElem);
                loadedFiles.set(name, codeElem);
                return codeElem;
            } else {
                console.error(response);
                return null;
            }
        }

        let currentSelection = null;
        let fileList = document.getElementById("file-list");

        function getFileLi(idx) {
            return fileList.children[idx];
        }

        function getFileName(idx) {
            return getFileLi(idx).getElementsByClassName("file-name")[0].innerText;
        }

        let codePane = document.getElementById("code-pane");

        function status(msg) {
            let statusDiv = document.createElement("div");
            statusDiv.classList.add("code-status");
            statusDiv.innerText = msg;
            codePane.innerHTML = "";
            codePane.appendChild(statusDiv);
        }

        async function select(idx) {
            // adjust the classes
            if (currentSelection !== null) {
                getFileLi(currentSelection).classList.remove("selected");
            }
            currentSelection = idx;
            let newLi = getFileLi(idx);
            newLi.classList.add("selected");
            let name = getFileName(idx);
            status("Loading...");
            let elem = await loadFile(name);
            if (elem === null) {
                status("The file could not be loaded.");
            } else {
                codePane.innerHTML = "";
                codePane.appendChild(elem);
            }
        }

        async function updateSimFile() {
            if (currentSelection !== null) {
                let fileName = getFileName(currentSelection);
                let response = await fetch("/admin/update_sim_file", {
                    method: "POST",
                    body: fileName,
                });
                if (response.ok) {
                    location.reload();
                }
            }
        }

        for (let i = 0; i < fileList.children.length; i++) {
            let li = fileList.children[i];
            if (getFileName(i) == {{ active | json_encode | safe }}) {
                select(i);
                break;
            }
        }

        addEventListener("keydown", function(e) {
            if (e.ctrlKey || e.metaKey) return;
            if (e.key == "ArrowUp") {
                if (currentSelection !== null && currentSelection > 0) {
                    select(currentSelection - 1);
                }
                e.preventDefault();
            } else if (e.key == "ArrowDown") {
                if (currentSelection !== null && currentSelection < fileList.children.length - 1) {
                    select(currentSelection + 1);
                }
                e.preventDefault();
            }
        });
    </script>
{%- endblock js -%}
